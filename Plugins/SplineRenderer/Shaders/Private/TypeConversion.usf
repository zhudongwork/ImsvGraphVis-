#include "/Engine/Private/Common.ush"

/*
case VET_Float1:		SetupGLElement(GLElement, GL_FLOAT,			1,			false,	true); break;
case VET_Float2:		SetupGLElement(GLElement, GL_FLOAT,			2,			false,	true); break;
case VET_Float3:		SetupGLElement(GLElement, GL_FLOAT,			3,			false,	true); break;
case VET_Float4:		SetupGLElement(GLElement, GL_FLOAT,			4,			false,	true); break;
case VET_PackedNormal:	SetupGLElement(GLElement, GL_UNSIGNED_BYTE,	4,			true,	true); break;
case VET_UByte4:		SetupGLElement(GLElement, GL_UNSIGNED_BYTE,	4,			false,	false); break;
case VET_UByte4N:		SetupGLElement(GLElement, GL_UNSIGNED_BYTE,	4,			true,	true); break;
case VET_Color:
	if (FOpenGL::SupportsVertexArrayBGRA())
	{
		SetupGLElement(GLElement, GL_UNSIGNED_BYTE,	GL_BGRA,	true,	true);
	}
	else
	{
		SetupGLElement(GLElement, GL_UNSIGNED_BYTE,	4,	true,	true);
	}
	break;
case VET_Short2:		SetupGLElement(GLElement, GL_SHORT,			2,			false,	false); break;
case VET_Short4:		SetupGLElement(GLElement, GL_SHORT,			4,			false,	false); break;
case VET_Short2N:		SetupGLElement(GLElement, GL_SHORT,			2,			true,	true); break;
case VET_Half2:
	if (FOpenGL::SupportsVertexHalfFloat())
	{
		SetupGLElement(GLElement, FOpenGL::GetVertexHalfFloatFormat(), 2, false, true);
	}
	else
	{
		// @todo-mobile: Use shorts?
		SetupGLElement(GLElement, GL_SHORT, 2, false, true);
	}
	break;
case VET_Half4:
	if (FOpenGL::SupportsVertexHalfFloat())
	{
		SetupGLElement(GLElement, FOpenGL::GetVertexHalfFloatFormat(), 4, false, true);
	}
	else
	{
		// @todo-mobile: Use shorts?
		SetupGLElement(GLElement, GL_SHORT, 4, false, true);
	}
	break;
case VET_Short4N:		SetupGLElement(GLElement, GL_SHORT,			4,			true,	true); break;
case VET_UShort2:		SetupGLElement(GLElement, GL_UNSIGNED_SHORT, 2, false, false); break;
case VET_UShort4:		SetupGLElement(GLElement, GL_UNSIGNED_SHORT, 4, false, false); break;
case VET_UShort2N:		SetupGLElement(GLElement, GL_UNSIGNED_SHORT, 2, true, true); break;
case VET_UShort4N:		SetupGLElement(GLElement, GL_UNSIGNED_SHORT, 4, true, true); break;
*/

/*
case VET_Float1:		D3DElement.Format = DXGI_FORMAT_R32_FLOAT; break;
case VET_Float2:		D3DElement.Format = DXGI_FORMAT_R32G32_FLOAT; break;
case VET_Float3:		D3DElement.Format = DXGI_FORMAT_R32G32B32_FLOAT; break;
case VET_Float4:		D3DElement.Format = DXGI_FORMAT_R32G32B32A32_FLOAT; break;
case VET_PackedNormal:	D3DElement.Format = DXGI_FORMAT_R8G8B8A8_UNORM; break;
case VET_UByte4:		D3DElement.Format = DXGI_FORMAT_R8G8B8A8_UINT; break;
case VET_UByte4N:		D3DElement.Format = DXGI_FORMAT_R8G8B8A8_UNORM; break;
case VET_Color:			D3DElement.Format = DXGI_FORMAT_B8G8R8A8_UNORM; break;
case VET_Short2:		D3DElement.Format = DXGI_FORMAT_R16G16_SINT; break;
case VET_Short4:		D3DElement.Format = DXGI_FORMAT_R16G16B16A16_SINT; break;
case VET_Short2N:		D3DElement.Format = DXGI_FORMAT_R16G16_SNORM; break;
case VET_Half2:			D3DElement.Format = DXGI_FORMAT_R16G16_FLOAT; break;
case VET_Half4:			D3DElement.Format = DXGI_FORMAT_R16G16B16A16_FLOAT; break;
case VET_Short4N:		D3DElement.Format = DXGI_FORMAT_R16G16B16A16_SNORM; break;
case VET_UShort2:		D3DElement.Format = DXGI_FORMAT_R16G16_UINT; break;
case VET_UShort4:		D3DElement.Format = DXGI_FORMAT_R16G16B16A16_UINT; break;
case VET_UShort2N:		D3DElement.Format = DXGI_FORMAT_R16G16_UNORM; break;
case VET_UShort4N:		D3DElement.Format = DXGI_FORMAT_R16G16B16A16_UNORM; break;
*/

uint ToPackedNormal(float3 Normal)
{
	const uint X = clamp(Normal.x * 127.5 + 127.5, 0, 255);
	const uint Y = clamp(Normal.y * 127.5 + 127.5, 0, 255);
	const uint Z = clamp(Normal.z * 127.5 + 127.5, 0, 255);
	const uint W = 128;

    // TODO: check format XYZW? WZXY?
    /*return (X << 24) | (Y << 16) | (Z << 8) | W;*/
	return (W << 24) | (Z << 16) | (Y << 8) | X;
}

uint ToPackedNormal(float3 Normal, uint W)
{
	const uint X = clamp(Normal.x * 127.5 + 127.5, 0, 255);
	const uint Y = clamp(Normal.y * 127.5 + 127.5, 0, 255);
	const uint Z = clamp(Normal.z * 127.5 + 127.5, 0, 255);

    // TODO: check format XYZW? WZXY?
    /*return (X << 24) | (Y << 16) | (Z << 8) | W;*/
	return (W << 24) | (Z << 16) | (Y << 8) | X;
}

uint ToPackedColor(float4 Color)
{
	const uint R = clamp(Color.r * 255, 0, 255);
	const uint G = clamp(Color.g * 255, 0, 255);
	const uint B = clamp(Color.b * 255, 0, 255);
	const uint A = clamp(Color.a * 255, 0, 255);

	// TODO: check format BGRA? RGBA? ABGR? ARGB?
    // SEE FCOLOR_COMPONENT_SWIZZLE
	return (A << 24) | (R << 16) | (G << 8) | B;
}
